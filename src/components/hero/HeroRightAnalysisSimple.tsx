import React, { useState, useRef, useCallback } from 'react';
import { exampleAnalysisResults } from '../../data/exampleAnalysisResults';

interface HeroRightAnalysisSimpleProps {
  onAnalysisComplete?: (result: any) => void;
  onNavigateToFullAnalysis?: (result: any) => void;
}

/**
 * Simplified Hero Right Analysis Component
 * Basic file upload and result display without credit system
 */
export default function HeroRightAnalysisSimple({ onAnalysisComplete, onNavigateToFullAnalysis }: HeroRightAnalysisSimpleProps) {
  // State management
  const [analysisState, setAnalysisState] = useState<'example' | 'analyzing' | 'result'>('example');
  const [analysisResult, setAnalysisResult] = useState<string>('');
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [audioDuration, setAudioDuration] = useState<number>(0);
  const [dragActive, setDragActive] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string>('');
  const [currentExample, setCurrentExample] = useState(0);

  const fileInputRef = useRef<HTMLInputElement>(null);

  // Example rotation effect
  React.useEffect(() => {
    if (analysisState === 'example') {
      const interval = setInterval(() => {
        setCurrentExample(prev => (prev + 1) % exampleAnalysisResults.length);
      }, 5000);
      return () => clearInterval(interval);
    }
  }, [analysisState]);

  // Detect audio duration
  const detectAudioDuration = useCallback(async (file: File): Promise<number> => {
    return new Promise((resolve) => {
      const audio = new Audio();
      const url = URL.createObjectURL(file);
      
      audio.onloadedmetadata = () => {
        const duration = Math.ceil(audio.duration);
        URL.revokeObjectURL(url);
        resolve(duration);
      };
      
      audio.src = url;
    });
  }, []);

  // Handle file upload
  const handleFileUpload = useCallback(async (file: File) => {
    try {
      setErrorMessage('');
      
      // Detect audio duration
      const duration = await detectAudioDuration(file);
      setAudioDuration(duration);
      
      // Simple validation - just check if file is audio
      if (!file.type.startsWith('audio/')) {
        setErrorMessage('Please upload an audio file.');
        return;
      }
      
      setUploadedFile(file);
      setAnalysisState('analyzing');
      
      // Simulate analysis
      setTimeout(() => {
        const mockResult = {
          id: `hero-${Date.now()}`,
          filename: file.name,
          analysis: {
            aiDescription: "This is a sample analysis result. In the full version, this would be generated by our AI analysis engine."
          }
        };
        
        setAnalysisResult(mockResult.analysis.aiDescription);
        setAnalysisState('result');
        
        if (onAnalysisComplete) {
          onAnalysisComplete(mockResult);
        }
      }, 2000);
      
    } catch (error) {
      console.error('Error handling file upload:', error);
      setErrorMessage('Failed to process audio file. Please try again.');
    }
  }, [detectAudioDuration, onAnalysisComplete]);

  // Handle drag events
  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const file = e.dataTransfer.files[0];
      if (file.type.startsWith('audio/')) {
        handleFileUpload(file);
      } else {
        setErrorMessage('Please upload an audio file.');
      }
    }
  }, [handleFileUpload]);

  const handleFileInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      handleFileUpload(e.target.files[0]);
    }
  }, [handleFileUpload]);

  const openFileDialog = useCallback(() => {
    fileInputRef.current?.click();
  }, []);

  // Get current example
  const currentExampleData = exampleAnalysisResults[currentExample];

  return (
    <div className="flex flex-col justify-center h-full px-6 lg:px-8">
      {/* Header with Gradient */}
      <div className="mb-8">
        <h2 className="text-2xl lg:text-3xl font-bold text-white mb-3">
          <span className="bg-gradient-to-r from-violet-200 to-blue-200 bg-clip-text text-transparent">
            Quick Audio Analysis
          </span>
        </h2>
        <p className="text-slate-300/90 text-sm lg:text-base leading-relaxed">
          Upload your audio file and get instant AI-powered analysis with detailed insights
        </p>
      </div>

      {/* Credit Display with Better Design */}
      <div className="mb-8">
        <div className="bg-gradient-to-r from-blue-500/10 to-violet-500/10 backdrop-blur-sm border border-blue-500/30 rounded-xl p-5">
          <div className="flex items-center gap-3 mb-2">
            <div className="w-8 h-8 rounded-lg bg-gradient-to-r from-blue-500/20 to-violet-500/20 flex items-center justify-center">
              <span className="text-lg">ðŸ’¡</span>
            </div>
            <span className="font-semibold text-blue-200">New User Free Trial</span>
          </div>
          <div className="text-sm text-blue-200/80 mb-2">
            Analyze up to 100 seconds of audio â€¢ 1 second = 1 credit
          </div>
          {audioDuration > 0 && (
            <div className="text-sm text-green-300 bg-green-500/10 rounded-lg px-3 py-1 inline-block">
              âœ… This audio will consume {audioDuration} credits
            </div>
          )}
        </div>
      </div>

      {/* Upload Zone with Better Design */}
      <div className="mb-8">
        <div
          className={`
            relative z-10 bg-white/5 backdrop-blur-sm p-8 text-center transition-all duration-300 
            cursor-pointer border-2 border-dashed rounded-2xl
            ${dragActive 
              ? 'border-violet-400/60 bg-violet-500/15 scale-105 shadow-lg shadow-violet-500/20' 
              : 'border-white/20 hover:border-violet-400/40 hover:bg-white/8 hover:shadow-lg hover:shadow-violet-500/10'
            }
          `}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
          onClick={openFileDialog}
        >
          <input
            ref={fileInputRef}
            type="file"
            className="hidden"
            accept="audio/*"
            onChange={handleFileInput}
          />

          {/* Upload Icon with Animation */}
          <div className="mb-6">
            <div className="w-20 h-20 mx-auto bg-gradient-to-r from-violet-500 to-blue-500 rounded-2xl flex items-center justify-center shadow-lg shadow-violet-500/30 group-hover:scale-110 transition-transform duration-300">
              <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
              </svg>
            </div>
          </div>

          <h3 className="text-xl font-bold text-white mb-3">
            Drop your audio file here
          </h3>
          <p className="text-slate-300/90 text-sm mb-4">
            or click to select file
          </p>
          
          <div className="flex flex-wrap justify-center gap-2 text-xs text-slate-400">
            <span className="px-3 py-1 bg-white/10 rounded-full">MP3</span>
            <span className="px-3 py-1 bg-white/10 rounded-full">WAV</span>
            <span className="px-3 py-1 bg-white/10 rounded-full">FLAC</span>
            <span className="px-3 py-1 bg-white/10 rounded-full">AAC</span>
          </div>
        </div>
      </div>

      {/* Error Message */}
      {errorMessage && (
        <div className="mb-4 p-3 bg-red-500/10 border border-red-500/30 rounded-lg">
          <p className="text-red-300 text-sm">{errorMessage}</p>
        </div>
      )}

      {/* Analysis Progress with Better Design */}
      {analysisState === 'analyzing' && (
        <div className="mb-8">
          <div className="bg-gradient-to-r from-violet-500/10 to-blue-500/10 backdrop-blur-sm rounded-2xl p-6 border border-violet-500/20">
            <div className="flex items-center gap-4 mb-4">
              <div className="w-8 h-8 border-2 border-violet-500 border-t-transparent rounded-full animate-spin"></div>
              <span className="text-white text-lg font-semibold">Analyzing your audio...</span>
            </div>
            <div className="w-full bg-slate-700/50 rounded-full h-3 mb-3">
              <div className="bg-gradient-to-r from-violet-500 to-blue-500 h-3 rounded-full transition-all duration-300 animate-pulse"></div>
            </div>
            <div className="text-sm text-slate-300">
              Processing audio data with AI...
            </div>
          </div>
        </div>
      )}

      {/* Result Display with Better Design */}
      <div className="mb-8">
        <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
          {analysisState === 'example' && (
            <div>
              <div className="flex items-center gap-3 mb-4">
                <div className="w-8 h-8 rounded-lg bg-gradient-to-r from-violet-500/20 to-blue-500/20 flex items-center justify-center">
                  <span className="text-sm">ðŸŽµ</span>
                </div>
                <div>
                  <span className="text-sm text-slate-400">Example Result</span>
                  <span className="text-sm text-slate-500 mx-2">â€¢</span>
                  <span className="text-sm text-violet-300 font-medium">{currentExampleData.title}</span>
                </div>
              </div>
              <p className="text-white/90 text-sm leading-relaxed">
                {currentExampleData.description}
              </p>
            </div>
          )}
          
          {analysisState === 'result' && (
            <div>
              <div className="flex items-center gap-3 mb-4">
                <div className="w-8 h-8 rounded-lg bg-gradient-to-r from-green-500/20 to-emerald-500/20 flex items-center justify-center">
                  <span className="text-sm">âœ“</span>
                </div>
                <span className="text-sm text-green-400 font-semibold">Analysis Complete</span>
              </div>
              <p className="text-white/90 text-sm leading-relaxed mb-4">
                {analysisResult}
              </p>
              <button
                onClick={() => {
                  if (analysisResult) {
                    const mockResult = {
                      id: `hero-${Date.now()}`,
                      filename: uploadedFile?.name || 'Unknown',
                      analysis: { aiDescription: analysisResult }
                    };
                    if (onNavigateToFullAnalysis) {
                      onNavigateToFullAnalysis(mockResult);
                    } else {
                      window.location.href = '/analyze/';
                    }
                  }
                }}
                className="w-full px-6 py-3 bg-gradient-to-r from-violet-500 to-blue-500 text-white text-sm font-semibold rounded-xl hover:from-violet-600 hover:to-blue-600 transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-violet-500/25"
              >
                View Full Analysis
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}