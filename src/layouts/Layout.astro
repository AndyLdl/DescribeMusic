---
import { SEO } from "astro-seo";
import "@fontsource-variable/inter/index.css";
import "@fontsource-variable/bricolage-grotesque";
import "../styles/global.css";
import en from "../i18n/en.json";
import Header from "@/components/Header.astro";

const t = (key) => key.split('.').reduce((o, i) => o[i], en);

export interface Props {
  title?: string;
  description?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();
const resolvedImageWithDomain = new URL("/opengraph.jpg", Astro.site).toString();

const { title, description } = Astro.props;

const siteTitle = t('site.title');
const siteDescription = t('site.description');
const siteKeywords = t('site.keywords');

const makeTitle = title ? `${title} | Describe Music` : siteTitle;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="keywords" content={siteKeywords} />

    <SEO
      title={makeTitle}
      description={description || siteDescription}
      canonical={canonicalURL}
      twitter={{
        creator: "@describemusic",
        site: "@describemusic",
        card: "summary_large_image",
      }}
      openGraph={{
        basic: {
          url: canonicalURL,
          type: "website",
          title: makeTitle,
          image: resolvedImageWithDomain,
        },
        image: {
          alt: "Describe Music AI-Powered Audio Analysis",
        },
      }}
    />
  </head>
  <body>
    <Header />
    <slot />
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const animatedElements = document.querySelectorAll(".animate-on-scroll");
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add("is-visible");
              observer.unobserve(entry.target);
            }
          });
        }, {
          threshold: 0.1,
        });

        animatedElements.forEach(el => {
          observer.observe(el);
        });
      });
    </script>
  </body>
</html>
